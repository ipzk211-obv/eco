datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    hashedPassword String?
    createAt       DateTime  @default(now())
    updateAt       DateTime  @updatedAt
    role           Role      @default(USER)

    accounts     Account[]
    orders       Order[]
    reviews      Review[]
    orderConsult OrderConsult[]
}

model Product {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String
    category    String
    charity     String
    inStock     Boolean
    images      Image[]
    reviews     Review[]
}

model Consult {
    id             String         @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    fullName       String
    profession     String
    initialConsult String
    monthConsult   String
    description1   String
    description2   String
    image          String
    email          String?        @unique
    hashedPassword String?
    orderConsult   OrderConsult[]
}

model OrderConsult {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    consultId  String   @db.ObjectId
    userId     String   @db.ObjectId
    phone      String
    comment    String
    status     String
    createDate DateTime @default(now())
    consult    Consult  @relation(fields: [consultId], references: [id])
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    userId     String   @db.ObjectId
    productId  String   @db.ObjectId
    rating     Int
    comment    String
    createDate DateTime @default(now())

    product Product @relation(fields: [productId], references: [id])
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId
    userId          String   @db.ObjectId
    amount          Float
    currency        String
    status          String
    deliveryStatus  String?
    createDate      DateTime @default(now())
    paymentIntentId String   @unique

    products CartProductType[]
    address  Address?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type CartProductType {
    id          String
    name        String
    description String
    charity     String
    category    String
    selectImg   Image
    quantity    Int
}

type Image {
    price  Float
    weight String
    image  String
}

type Address {
    city        String
    country     String
    line1       String
    line2       String?
    postal_code String
    state       String
}

enum Role {
    USER
    ADMIN
    EXPERT
}
